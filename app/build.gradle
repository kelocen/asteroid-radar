plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.kelocen.asteroidradar"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // This app requires a valid API key that should be
        // placed in the key.properties file. The included
        // key is a test key made available by the API vendor
        // and has a limited number of queries.
        ApiKey.checkBuildKeyProperties()
        buildConfigField "boolean", "isKeyEncoded", ApiKey.isKeyEncoded()
        buildConfigField "String", "API_KEY", ApiKey.getApiKey()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

configurations.all {
    resolutionStrategy.force "org.antlr:antlr4-runtime:4.7.1"
    resolutionStrategy.force "org.antlr:antlr4-tool:4.7.1"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // Core KTX
    implementation 'androidx.core:core-ktx:1.5.0'
    // Support Libraries
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // Lifecycle & ViewModel
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.4'
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Moshi
    implementation 'com.squareup.moshi:moshi:1.12.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0-native-mt'
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"
    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.2.0"
    // Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'
    // Room
    implementation "androidx.room:room-ktx:2.3.0"
    implementation "androidx.room:room-runtime:2.3.0"
    kapt "androidx.room:room-compiler:2.3.0"
    // Legacy Support
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // WorkManager
    implementation "android.arch.work:work-runtime-ktx:1.0.1"
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // OkHTTPProfiler
    implementation 'com.localebro:okhttpprofiler:1.0.8'
    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
}

class ApiKey {
    static String[] keyProperties = new String[2]

    // Checks for the key properties file; creates it with default values if not present.
    static void checkBuildKeyProperties() {
        File keyFile = new File("key.properties")
        if (!keyFile.exists()) {
            keyFile.createNewFile()
            keyFile.text = "#True for base 64, False for plaintext." +
                    "\nisKeyEncoded=false\nAPI_KEY=\"\""
        }
        getKeyProperties(keyFile)
    }
    // Reads the key properties file and adds values to array
    static def getKeyProperties(File keyFile) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(keyFile))
        keyProperties[0] = properties['isKeyEncoded']
        keyProperties[1] = properties['API_KEY']
    }
    // Retrieves the boolean that indicates if the key is encoded with base 64.
    static def isKeyEncoded() {
        return keyProperties[0]
    }
    //Retrieves the api key from the properties array.
    static def getApiKey() {
        return keyProperties[1]
    }
}